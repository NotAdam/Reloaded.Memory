<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>


<# 
    string[] types = { "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64" };
#>

using System;
using System.Runtime.CompilerServices;

namespace Reloaded.Memory.Streams.Readers
{
    public partial class LittleEndianStreamReader
    {

<#
		foreach (var type in types)
		{
#>
		/// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override unsafe void Read(out <#=type#> value) => value = Reader.Read<<#=type#>>();

		/// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override unsafe <#=type#> Read<#=type#>() => Reader.Read<<#=type#>>();

		/// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override unsafe void Peek(out <#=type#> value) => value = Reader.Peek<<#=type#>>();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override unsafe <#=type#> Peek<#=type#>() => Reader.Peek<<#=type#>>();
<#
		}
#>
	}
}