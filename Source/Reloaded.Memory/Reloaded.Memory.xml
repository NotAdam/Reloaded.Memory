<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Reloaded.Memory</name>
    </assembly>
    <members>
        <member name="T:Reloaded.Memory.Endian">
            <summary>
            Provides various utilities for converting primitives and structures between endians.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Endian.Reverse``1(``0@,``0@)">
            <summary>
            Reverses the endian of a primitive value such as int, short, float, double etc. (Not including structs).
            </summary>
            <param name="type">The individual value to be byte reversed.</param>
            <param name="swapped">The output variable to receive the swapped out value.</param>
        </member>
        <member name="T:Reloaded.Memory.Exceptions.MemoryAllocationException">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryAllocationException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryAllocationException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryAllocationException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryAllocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Reloaded.Memory.Exceptions.MemoryException">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Reloaded.Memory.Exceptions.MemoryPermissionException">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryPermissionException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryPermissionException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryPermissionException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Exceptions.MemoryPermissionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Reloaded.Memory.Pointers.ArrayPtr`1">
            <summary>
            Abstracts a native 'C' type array of unknown size in memory to a more familiar interface.
            TStruct can be a primitive, a struct or a class with explicit StructLayout attribute.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.ArrayPtr`1.Pointer">
            <inheritdoc />
        </member>
        <member name="P:Reloaded.Memory.Pointers.ArrayPtr`1.MarshalElements">
            <inheritdoc />
        </member>
        <member name="P:Reloaded.Memory.Pointers.ArrayPtr`1.Source">
            <inheritdoc />
        </member>
        <member name="P:Reloaded.Memory.Pointers.ArrayPtr`1.ElementSize">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Pointers.ArrayPtr`1.Get(`0@,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Pointers.ArrayPtr`1.Set(`0@,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Pointers.ArrayPtr`1.#ctor(System.UInt64,System.Boolean,Reloaded.Memory.Sources.IMemory)">
            <summary>
            Constructs a new instance of <see cref="T:Reloaded.Memory.Pointers.ArrayPtr`1"/> given the address of the first element
            and whether elements should be marshaled or not as they are read.
            </summary>
            <param name="address">The address of the first element of the structure array.</param>
            <param name="marshalElements">Set to true in order to marshal elements as they are read in and out.</param>
            <param name="source">Specifies the source from which the individual array elements should be read/written.</param>
            <remarks>See <see cref="T:Reloaded.Memory.Pointers.ArrayPtr`1"/></remarks>
        </member>
        <member name="M:Reloaded.Memory.Pointers.ArrayPtr`1.GetPointerToElement(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Reloaded.Memory.Pointers.FixedArrayPtr`1">
            <summary>
            Abstracts a native 'C' type array of a set size in memory to a more familiar interface.
            TStruct can be a primitive, a struct or a class with explicit StructLayout attribute.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.FixedArrayPtr`1.Pointer">
            <summary>
            Gets the pointer to the start of the data contained in the <see cref="T:Reloaded.Memory.Pointers.FixedArrayPtr`1"/>.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.FixedArrayPtr`1.Count">
            <summary>
            The number of elements contained in the <see cref="T:Reloaded.Memory.Pointers.FixedArrayPtr`1"/>.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.FixedArrayPtr`1.MarshalElements">
            <summary>
            If this is true; elements will be marshaled as they are read in and out from memory.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.FixedArrayPtr`1.Source">
            <summary>
            The source where memory will be read/written.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.FixedArrayPtr`1.ElementSize">
            <summary>
            Size of a single element in the array, in bytes.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.FixedArrayPtr`1.ArraySize">
            <summary>
            Contains the size of the entire array, in bytes.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.Get(`0@,System.Int32)">
            <summary>
            Gets the value of an item at a specific index.
            </summary>
            <param name="value">The value to be received from the array.</param>
            <param name="index">The index in the array from which to receive the value.</param>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.Set(`0@,System.Int32)">
            <summary>
            Sets the value of an item at a specific index.
            </summary>
            <param name="value">The value to be written.</param>
            <param name="index">The index in the array to which the value is to be written to.</param>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.#ctor(System.UInt64,System.Int32,System.Boolean,Reloaded.Memory.Sources.IMemory)">
            <summary>
            Constructs a new instance of <see cref="T:Reloaded.Memory.Pointers.FixedArrayPtr`1"/> given the address of the first element, 
            and the number of elements that follow it.
            </summary>
            <param name="address">The address of the first element of the structure array.</param>
            <param name="count">The amount of elements in the array structure in memory.</param>
            <param name="marshalElements">If this is set to true elements will be marshaled as they are read in and out from memory.</param>
            <param name="source">Specifies the source from which the individual array elements should be read/written. This defaults to current process/local memory.</param>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.Contains(`0@)">
            <summary>
            Determines whether an element is in the <see cref="T:Reloaded.Memory.Pointers.FixedArrayPtr`1"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.IndexOf(`0@)">
            <summary>
            Searches for a specified item and returns the index of the item
            if present.
            </summary>
            <param name="item">The item to search for in the array.</param>
            <returns>The index of the item, if present in the array.</returns>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.CopyFrom(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies all the elements of the passed in sourceArray to the <see cref="T:Reloaded.Memory.Pointers.FixedArrayPtr`1"/> array.
            </summary>
            <param name="sourceArray">The array from which to copy elements from.</param>
            <param name="length">The amount of elements in the source array that should be copied.</param>
            <param name="sourceIndex">The array index in the source array copy elements from.</param>
            <param name="destinationIndex">The starting index into the <see cref="T:Reloaded.Memory.Pointers.FixedArrayPtr`1"/> to which elements should be copied to.</param>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.CopyTo(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies all the elements from the the <see cref="T:Reloaded.Memory.Pointers.FixedArrayPtr`1"/> to the passed in sourceArray.
            </summary>
            <param name="destinationArray">The array from which to copy elements to.</param>
            <param name="length">The amount of elements in to copy to sourceArray.</param>
            <param name="sourceIndex">The array index in the <see cref="T:Reloaded.Memory.Pointers.FixedArrayPtr`1"/> to copy elements from.</param>
            <param name="destinationIndex">The starting index into the <see cref="T:Reloaded.Memory.Pointers.FixedArrayPtr`1"/> array to which elements should be copied to.</param>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.GetPointerToElement(System.Int32)">
            <summary>
            Gets the pointer to the element at the given index.
            </summary>
            <param name="index">The index to retrieve a pointer for.</param>
            <returns>
                Pointer to the requested element at index.
                -1 if the element is not part of the collection.
            </returns>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Reloaded.Memory.Pointers.FixedArrayPtr`1.FixedArrayPtrEnumerator">
            <summary>
            Implements the IEnumerator Structure for the Fixed Array Pointer, allowing for
            LINQ queries to be used.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.FixedArrayPtr`1.FixedArrayPtrEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="F:Reloaded.Memory.Pointers.FixedArrayPtr`1.FixedArrayPtrEnumerator._arrayPtr">
            <summary>
            Contains a copy of the parent object that is to be enumerated.
            </summary>
        </member>
        <member name="F:Reloaded.Memory.Pointers.FixedArrayPtr`1.FixedArrayPtrEnumerator._currentIndex">
            <summary>
            Contains the index of the current element being enumerated.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.FixedArrayPtrEnumerator.#ctor(Reloaded.Memory.Pointers.FixedArrayPtr{`0})">
            <summary>
            Constructor for the custom enumerator.
            </summary>
            <param name="parentArrayPtr">Contains original FixedArrayPtr this enumerator was intended for.</param>
        </member>
        <member name="P:Reloaded.Memory.Pointers.FixedArrayPtr`1.FixedArrayPtrEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.FixedArrayPtrEnumerator.MoveNext">
            <summary>
            Advances the enumerator cursor to the next element of the collection.
            </summary>
            <returns>
                True if the enumerator was successfully advanced to the next element.
                False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.FixedArrayPtrEnumerator.Reset">
            <summary>
            Resets the current index and pointer to the defaults.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Pointers.FixedArrayPtr`1.FixedArrayPtrEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Reloaded.Memory.Pointers.IArrayPtr`1">
            <summary>
            An interface type which describes a pointer to an array in arbitrary memory.
            </summary>
            <typeparam name="TStruct">A primitive or struct type to which the pointer is intended to point to.</typeparam>
        </member>
        <member name="P:Reloaded.Memory.Pointers.IArrayPtr`1.ElementSize">
            <summary>
            Size of a single element in the array, in bytes.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.IArrayPtr`1.MarshalElements">
            <summary>
            If this is true; elements will be marshaled as they are read in and out from memory.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.IArrayPtr`1.Pointer">
            <summary>
            Gets the pointer to the start of the data contained in the <see cref="T:Reloaded.Memory.Pointers.IArrayPtr`1"/>.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.IArrayPtr`1.Source">
            <summary>
            The source where memory will be read/written to/from.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Pointers.IArrayPtr`1.GetPointerToElement(System.Int32)">
            <summary>
            Gets the pointer to the element at the given index.
            </summary>
            <param name="index">The index to retrieve a pointer for.</param>
            <returns>Pointer to the requested element at index.</returns>
        </member>
        <member name="M:Reloaded.Memory.Pointers.IArrayPtr`1.Get(`0@,System.Int32)">
            <summary>
            Gets the value of an item at a specific index.
            </summary>
            <param name="value">The value to be received from the array.</param>
            <param name="index">The index in the array from which to receive the value.</param>
        </member>
        <member name="M:Reloaded.Memory.Pointers.IArrayPtr`1.Set(`0@,System.Int32)">
            <summary>
            Sets the value of an item at a specific index.
            </summary>
            <param name="value">The value to be written.</param>
            <param name="index">The index in the array to which the value is to be written to.</param>
        </member>
        <member name="T:Reloaded.Memory.Pointers.Pointer`1">
            <summary>
            Represents a reference to a value of type <typeparamref name="TStruct"/>.
            Wraps a native pointer around a managed type, improving the ease of use.
            TStruct can be a primitive, a struct or a class with explicit StructLayout attribute.
            </summary>
            <typeparam name="TStruct">Value type to hold a reference to.</typeparam>
        </member>
        <member name="P:Reloaded.Memory.Pointers.Pointer`1.Address">
            <summary>
            Gets the pointer to the value.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.Pointer`1.MarshalElements">
            <summary>
            If this is true; elements will be marshaled as they are read in and out from memory.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Pointers.Pointer`1.Source">
            <summary>
            The source where memory will be read/written to/from.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Pointers.Pointer`1.GetValue(`0@)">
            <summary>
            Gets the value at the address where the current pointer points to.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Reloaded.Memory.Pointers.Pointer`1.SetValue(`0@)">
            <summary>
            Sets the value where the current pointer is pointing to.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Reloaded.Memory.Pointers.Pointer`1.#ctor(System.UInt64,System.Boolean,Reloaded.Memory.Sources.IMemory)">
            <summary>
            Constructs a new instance of <see cref="T:Reloaded.Memory.Pointers.Pointer`1"/> given the address (pointer)
            at which the value of type <typeparamref name="TStruct"/> is stored.
            </summary>
            <param name="address">The address of the pointer pointing to generic type {T}</param>
            <param name="marshalElements">If this is true; elements will be marshaled as they are read in and out from memory.</param>
            <param name="memorySource">Specifies the source from which the pointer should be read/written.</param>
        </member>
        <member name="T:Reloaded.Memory.Sources.ExternalMemory">
            <summary>
            Provides access to memory of another process on a Windows machine.
            </summary>
        </member>
        <member name="F:Reloaded.Memory.Sources.ExternalMemory._localMemory">
            <summary>
            Contains the current process' memory.
            </summary>
        </member>
        <member name="F:Reloaded.Memory.Sources.ExternalMemory._processHandle">
            <summary>
            Contains the handle of the process used to read memory
            from and write memory to external process.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sources.ExternalMemory.#ctor(System.IntPtr)">
            <summary>
            Creates an instance of the <see cref="T:Reloaded.Memory.Sources.ExternalMemory"/> class used to read from an
            external process with a specified handle.
            </summary>
            <param name="processHandle">Handle of the process to read/write memory from.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.ExternalMemory.#ctor(System.Diagnostics.Process)">
            <summary>
            Creates an instance of the <see cref="T:Reloaded.Memory.Sources.ExternalMemory"/> class used to read from an
            external process with a specified handle.
            </summary>
            <param name="process">The individual process to read/write memory from.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.ExternalMemory.Read``1(System.IntPtr,``0@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.ExternalMemory.ReadRaw(System.IntPtr,System.Byte[]@,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.ExternalMemory.Write``1(System.IntPtr,``0@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.ExternalMemory.WriteRaw(System.IntPtr,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.ExternalMemory.Allocate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.ExternalMemory.Free(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.ExternalMemory.ChangePermission(System.IntPtr,System.Int32,Vanara.PInvoke.Kernel32.MEM_PROTECTION)">
            <inheritdoc />
        </member>
        <member name="T:Reloaded.Memory.Sources.IMemory">
            <summary>
            A simple interface that provides read/write access to arbitrary memory.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sources.IMemory.Read``1(System.IntPtr,``0@,System.Boolean)">
            <summary>
            Reads a generic type from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">Local variable to receive the read in struct.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
            <exception cref="T:Reloaded.Memory.Exceptions.MemoryException">Failed to read memory.</exception>
        </member>
        <member name="M:Reloaded.Memory.Sources.IMemory.ReadRaw(System.IntPtr,System.Byte[]@,System.Int32)">
            <summary>
            Reads raw data from a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">Local variable to receive the read in bytes.</param>
            <param name="length">The amount of bytes to read starting from the memoryAddress.</param>
            <exception cref="T:Reloaded.Memory.Exceptions.MemoryException">Failed to read memory.</exception>
        </member>
        <member name="M:Reloaded.Memory.Sources.IMemory.Write``1(System.IntPtr,``0@,System.Boolean)">
            <summary>
            Writes a generic type to a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="item">The item to write to the address.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
            <exception cref="T:Reloaded.Memory.Exceptions.MemoryException">Failed to write memory.</exception>
        </member>
        <member name="M:Reloaded.Memory.Sources.IMemory.WriteRaw(System.IntPtr,System.Byte[])">
            <summary>
            Writes raw data to a specified memory address.
            </summary>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="data">The bytes to write to memoryAddress.</param>
            <exception cref="T:Reloaded.Memory.Exceptions.MemoryException">Failed to write memory.</exception>
        </member>
        <member name="M:Reloaded.Memory.Sources.IMemory.Allocate(System.Int32)">
            <summary>
            Allocates fixed size of memory inside the target memory source. 
            Returns the address of newly allocated memory. 
            </summary>
            <param name="length">Amount of bytes to be allocated.</param>
            <exception cref="T:System.NotImplementedException">Thrown if a deriving class does not implement this function.</exception>
            <exception cref="T:Reloaded.Memory.Exceptions.MemoryAllocationException">Failed to allocate memory.</exception>
            <returns>Address to the newly allocated memory.</returns>
        </member>
        <member name="M:Reloaded.Memory.Sources.IMemory.Free(System.IntPtr)">
            <summary>
            Frees memory previously allocated with <see cref="M:Reloaded.Memory.Sources.IMemory.Allocate(System.Int32)"/>.
            </summary>
            <param name="address">The address of the memory to free.</param>
            <exception cref="T:System.NotImplementedException">Thrown if a deriving class does not implement this function.</exception>
            <returns>True if the operation is successful.</returns>
        </member>
        <member name="M:Reloaded.Memory.Sources.IMemory.ChangePermission(System.IntPtr,System.Int32,Vanara.PInvoke.Kernel32.MEM_PROTECTION)">
            <summary>
            Changes the page permissions for a specified combination of address and length.
            </summary>
            <param name="memoryAddress">The memory address for which to change page permissions for.</param>
            <param name="size">The region size for which to change permissions for.</param>
            <param name="newPermissions">The new permissions to set.</param>
            <exception cref="T:System.NotImplementedException">Thrown if a deriving class does not implement this function.</exception>
            <exception cref="T:Reloaded.Memory.Exceptions.MemoryPermissionException">Failed to change permissions for the following memory address and size.</exception>
            <returns>The old page permissions.</returns>
        </member>
        <member name="T:Reloaded.Memory.Sources.Memory">
            <inheritdoc />
        </member>
        <member name="P:Reloaded.Memory.Sources.Memory.CurrentProcess">
            <summary>
            Allows you to access the memory for the currently running process.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sources.Memory.Read``1(System.IntPtr,``0@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.Memory.ReadRaw(System.IntPtr,System.Byte[]@,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.Memory.Write``1(System.IntPtr,``0@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.Memory.WriteRaw(System.IntPtr,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.Memory.Allocate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.Memory.Free(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sources.Memory.ChangePermission(System.IntPtr,System.Int32,Vanara.PInvoke.Kernel32.MEM_PROTECTION)">
            <inheritdoc />
        </member>
        <member name="T:Reloaded.Memory.Sources.MemoryExtensions">
            <summary>
            A generic extension class that extends <see cref="T:Reloaded.Memory.Sources.IMemory"/>.
            Provides various functions such as reading arrays.
            </summary>
        </member>
        <member name="T:Reloaded.Memory.Sources.MemoryExtensions.ReadFunction`1">
            <summary>
            See <see cref="M:Reloaded.Memory.Sources.IMemory.Read``1(System.IntPtr,``0@,System.Boolean)"/>
            </summary>
        </member>
        <member name="T:Reloaded.Memory.Sources.MemoryExtensions.WriteFunction`1">
            <summary>
            See <see cref="M:Reloaded.Memory.Sources.IMemory.Write``1(System.IntPtr,``0@,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.Read``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0[]@,System.Int32,System.Boolean)">
            <summary>
            Reads a generic type array from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="value">Local variable to receive the read in struct array.</param>
            <param name="memory"></param>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="arrayLength">The amount of array items to read.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.SafeRead``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0@,System.Boolean)">
            <summary>
            Changes memory permissions to ensure memory can be read and reads a generic type from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memory"></param>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">Local variable to receive the read in struct.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.SafeReadRaw(Reloaded.Memory.Sources.IMemory,System.IntPtr,System.Byte[]@,System.Int32)">
            <summary>
            Changes memory permissions to ensure memory can be read and reads bytes from a specified memory address.
            </summary>
            <param name="memory"></param>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">Local variable to receive the read in bytes.</param>
            <param name="length">The amount of bytes to read from the executable.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.SafeRead``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0[]@,System.Int32,System.Boolean)">
            <summary>
            Changes memory permissions to ensure memory can be read and reads a generic type array from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memory"></param>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">Local variable to receive the read in struct array.</param>
            <param name="arrayLength">The amount of array items to read.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.Write``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0[],System.Boolean)">
            <summary>
            Writes a generic type array to a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memory"></param>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="items">The array of items to write to the address.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.SafeWrite``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0@,System.Boolean)">
            <summary>
            Changes memory permissions to ensure memory can be written and writes a generic type to a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memory"></param>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="item">The items to write to the address.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.SafeWriteRaw(Reloaded.Memory.Sources.IMemory,System.IntPtr,System.Byte[])">
            <summary>
            Changes memory permissions to ensure memory can be written and writes a generic type to a specified memory address.
            </summary>
            <param name="memory"></param>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="data">The data to write to the specified address.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.SafeWrite``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0[],System.Boolean)">
            <summary>
            Changes memory permissions to ensure memory can be written and writes a generic type array to a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memory"></param>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="items">The array of items to write to the address.</param>
            <param name="marshal">Set this to true to enable struct marshalling.</param>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.Write``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0,System.Boolean)">
            <summary>
            See <see cref="M:Reloaded.Memory.Sources.IMemory.Write``1(System.IntPtr,``0@,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.SafeWrite``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0,System.Boolean)">
            <summary>
            See <see cref="M:Reloaded.Memory.Sources.MemoryExtensions.SafeWrite``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0@,System.Boolean)"/> />
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sources.MemoryExtensions.ChangePermission``1(Reloaded.Memory.Sources.IMemory,System.IntPtr,``0@,Vanara.PInvoke.Kernel32.MEM_PROTECTION,System.Boolean)">
            <summary>
            Changes the page permissions for a specified combination of address and element from which to deduce size.
            </summary>
            <param name="memory"></param>
            <param name="memoryAddress">The memory address for which to change page permissions for.</param>
            <param name="baseElement">The struct element from which the region size to change permissions for will be calculated.</param>
            <param name="newPermissions">The new permissions to set.</param>
            <param name="marshalElement">Set to true to calculate the size of the struct after marshalling instead of before.</param>
            <returns>The old page permissions.</returns>
        </member>
        <member name="T:Reloaded.Memory.Struct">
            <summary>
            Struct is a general utility class providing functions which provides various functions for working with structures; such
            as reading/writing to/from memory of structures.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Struct.Source">
            <summary>
            Defines the source for the default memory reading and writing <see cref="M:Reloaded.Memory.Struct.ToPtr``1(System.IntPtr,``0,System.Boolean)"/> and <see cref="M:Reloaded.Memory.Struct.FromPtr``1(System.IntPtr,``0@,System.Boolean)"/> functions.
            This also affects the <see cref="T:Reloaded.Memory.StructArray"/> class.
            </summary>
        </member>
        <member name="F:Reloaded.Memory.Struct._thisProcessMemory">
            <summary>
            Allows for access of memory of this individual process.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Struct.ToPtr``1(System.IntPtr,``0,System.Boolean)">
            <summary>
            Writes an item with a specified structure or class type with explicit StructLayout attribute to a pointer/memory address.
            </summary>
            <param name="pointer">The address where to read the struct from.</param>
            <param name="item">T</param>
            <param name="marshalElement">Set to true to marshal the element.</param>
        </member>
        <member name="M:Reloaded.Memory.Struct.ToPtr``1(System.IntPtr,``0@,System.Boolean)">
            <summary>
            Writes an item with a specified structure or class type with explicit StructLayout attribute to a pointer/memory address.
            </summary>
            <param name="pointer">The address where to read the struct from.</param>
            <param name="item">The item to write to a specified pointer.</param>
            <param name="marshalElement">Set to true to marshal the element.</param>
        </member>
        <member name="M:Reloaded.Memory.Struct.FromPtr``1(System.IntPtr,``0@,System.Boolean)">
            <summary>
            Converts a pointer/memory address to a specified structure or class type with explicit StructLayout attribute.
            </summary>
            <param name="pointer">The address where to read the struct from.</param>
            <param name="value">Local variable to receive the read in struct.</param>
            <param name="marshalElement">Set to true to marshal the element.</param>
        </member>
        <member name="M:Reloaded.Memory.Struct.ToPtr``1(System.IntPtr,``0@,Reloaded.Memory.Sources.MemoryExtensions.WriteFunction{``0},System.Boolean)">
            <summary>
            Writes an item with a specified structure or class type with explicit StructLayout attribute to a pointer/memory address.
            </summary>
            <param name="pointer">The address where to read the struct from.</param>
            <param name="item">The item to write to a specified pointer.</param>
            <param name="marshalElement">Set to true to marshal the element.</param>
            <param name="writeFunction">The function to use that writes data to memory given a pointer, item, type and marshal option.</param>
        </member>
        <member name="M:Reloaded.Memory.Struct.FromPtr``1(System.IntPtr,``0@,Reloaded.Memory.Sources.MemoryExtensions.ReadFunction{``0},System.Boolean)">
            <summary>
            Converts a pointer/memory address to a specified structure or class type with explicit StructLayout attribute.
            </summary>
            <param name="pointer">The address where to read the struct from.</param>
            <param name="marshalElement">Set to true to marshal the element.</param>
            <param name="value">Local variable to receive the read in struct.</param>
            <param name="readFunction">A function that reads data from memory given a pointer, type and marshal option.</param>
        </member>
        <member name="M:Reloaded.Memory.Struct.FromArray``1(System.Byte[],``0@,System.Int32,System.Boolean)">
            <summary>
            Converts a byte array to a specified structure or class type with explicit StructLayout attribute.
            </summary>
            <param name="value">Local variable to receive the read in struct.</param>
            <param name="data">A byte array containing data from which to extract a structure from.</param>
            <param name="startIndex">The index in the byte array to read the element from.</param>
            <param name="marshalElement">Set to true to marshal the element.</param>
        </member>
        <member name="M:Reloaded.Memory.Struct.GetSize``1(System.Boolean)">
            <summary>
            Returns the size of a specific primitive or struct type.
            </summary>
            <param name="marshalElement">If set to true; will return the size of an element after marshalling.</param>
        </member>
        <member name="M:Reloaded.Memory.Struct.GetBytes``1(``0@,System.Boolean)">
            <summary>
            Creates a byte array from specified structure or class type with explicit StructLayout attribute.
            </summary>
            <param name="item">The item to convert into a byte array.</param>
            <param name="marshalElement">Set to true to marshal the element.</param>
        </member>
        <member name="T:Reloaded.Memory.StructArray">
            <summary>
            Utility class for working with struct arrays.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.StructArray.FromPtr``1(System.IntPtr,``0[]@,System.Int32,System.Boolean)">
            <summary>
            Reads a generic type array from a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to read from.</param>
            <param name="value">Local variable to receive the read in struct array.</param>
            <param name="arrayLength">The number of items to read from memory.</param>
            <param name="marshal">Set to true to marshal the element.</param>
        </member>
        <member name="M:Reloaded.Memory.StructArray.ToPtr``1(System.IntPtr,``0[],System.Boolean)">
            <summary>
            Writes a generic type array to a specified memory address.
            </summary>
            <typeparam name="T">An individual struct type of a class with an explicit StructLayout.LayoutKind attribute.</typeparam>
            <param name="memoryAddress">The memory address to write to.</param>
            <param name="item">The item to write to the address.</param>
            <param name="marshal">Set this to true in order to marshal the value when writing to memory.</param>
        </member>
        <member name="M:Reloaded.Memory.StructArray.FromArray``1(System.Byte[],``0[]@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Converts a byte array to a specified structure or class type with explicit StructLayout attribute.
            </summary>
            <param name="value">Local variable to receive the read in struct array.</param>
            <param name="data">A byte array containing data from which to extract a structure from.</param>
            <param name="startIndex">The index in the byte array to read the element(s) from.</param>
            <param name="marshalElement">Set to true to marshal the element.</param>
            <param name="length">The amount of elements to read from the byte array.</param>
        </member>
        <member name="M:Reloaded.Memory.StructArray.GetSize``1(System.Int32,System.Boolean)">
            <summary>
            Returns the size of a specific primitive or struct type.
            </summary>
            <param name="marshalElement">If set to true; will return the size of an element after marshalling.</param>
            <param name="elementCount">The number of array elements present.</param>
        </member>
        <member name="M:Reloaded.Memory.StructArray.GetBytes``1(``0[],System.Boolean)">
            <summary>
            Creates a byte array from specified structure or class type with explicit StructLayout attribute.
            </summary>
            <param name="items">The item to convert into a byte array.</param>
            <param name="marshalElements">Set to true to marshal the item(s).</param>
        </member>
    </members>
</doc>
